#!/usr/bin/env python3
# Copyright (C) 2022 woefe

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
import re
import subprocess
import time
from pathlib import Path
from typing import Optional

WHITESPACE = re.compile(r"\s+")


def get_default_iface() -> Optional[str]:
    try:
        with open("/proc/net/route") as f:
            while line := f.readline():
                iface, dest = line.split("\t")[:2]
                if dest == "00000000" and iface != "lo":
                    return iface
    except OSError:
        pass

    try:
        with open("/proc/net/ipv6_route") as f:
            while line := f.readline()[:-1]:
                dest_net, dest_prefix_len, _, _, _, _, _, _, _, iface = WHITESPACE.split(line)
                if dest_net == "00000000000000000000000000000000" and dest_prefix_len == "00" and iface != "lo":
                    return iface
    except OSError:
        pass

    return None


class Bandwidth:

    def __init__(self):
        self.prev_rx = 0
        self.prev_tx = 0
        self.prev_time = time.time_ns()
        self.prev_iface = ""
        self.loop_ctr = 0
        self.text = ""
        self.tooltip = ""
        self.tooltip_ssid = ""
        self.state = ""

    def disconnected(self, nic_icon):
        self.text = f"{nic_icon}  "
        self.tooltip = "disconnected"
        self.tooltip_ssid = ""
        self.state = "disconnected"

    def bandwidth(self):
        nic_icon = " "
        iface = get_default_iface()
        if iface is None:
            self.disconnected(nic_icon)
            return

        if Path(f"/sys/class/net/{iface}/phy80211").exists() or Path(f"/sys/class/net/{iface}/wireless").exists():
            nic_icon = " "

        try:
            # read_text() might also raise OSError under certain conditions
            if Path(f"/sys/class/net/{iface}/carrier").read_text() != "1\n":
                raise OSError("Interface not connected")
        except OSError:
            self.disconnected(nic_icon)
            return

        curr_rx = int(Path(f"/sys/class/net/{iface}/statistics/rx_bytes").read_text())
        curr_tx = int(Path(f"/sys/class/net/{iface}/statistics/tx_bytes").read_text())
        curr_time = time.time_ns()

        rx_diff = curr_rx - self.prev_rx
        tx_diff = curr_tx - self.prev_tx
        time_diff = curr_time - self.prev_time
        rx_rate = rx_diff / time_diff * 1000000
        tx_rate = tx_diff / time_diff * 1000000

        self.prev_rx = curr_rx
        self.prev_tx = curr_tx
        self.prev_time = curr_time

        # incoming
        if rx_rate >= 1000:
            rx_human = f"{rx_rate / 1000:0.2f}M"
        else:
            rx_human = f"{rx_rate:0.2f}K"

        # incoming
        if tx_rate > 1000:
            tx_human = f"{tx_rate / 1000:0.2f}M"
        else:
            tx_human = f"{tx_rate:0.2f}K"

        self.text = f"{nic_icon}  {rx_human}  {tx_human}"
        self.tooltip = f"Interface: {iface}"
        self.state = "connected"

    def slow_tick(self):
        iwgetid = subprocess.run(["iwgetid", "-r"], capture_output=True)
        if iwgetid.returncode == 0:
            self.tooltip_ssid = f"\nSSID: {iwgetid.stdout.decode().strip()}"
        else:
            self.tooltip_ssid = ""

    def tick(self):
        if self.loop_ctr == 0:
            self.slow_tick()

        self.bandwidth()

        waybar_json = {
            "text": self.text,
            "tooltip": self.tooltip + (self.tooltip_ssid if self.tooltip_ssid else ""),
            "class": self.state
        }
        print(json.dumps(waybar_json), flush=True)

        self.loop_ctr = (self.loop_ctr + 1) % 5


bandwidth = Bandwidth()

while True:
    bandwidth.tick()
    time.sleep(2)
